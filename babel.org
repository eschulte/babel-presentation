#+Title: Babel -- Org-mode Code Blocks
#+Author: Eric Schulte
#+Date: <2012-03-25 Sun>
#+Options: toc:nil ^:nil

* Org-mode -- a /very/ brief introduction
** Outlines in plain text
Outlines
- /everything/ is an outline
- navigate large files as if they were directories

Plain Text
- version control
- portable
- use other tools with other tools (e.g., notepad, =grep=)

** Export

:                     +------> LaTeX/PDF
:                     |                
:                     +------> HTML     
:       +-----+       |           
:       | Org |-------+------> plain text
:       +-----+       |                 
:                     +------> Open-Doc  
:                     |               
:                     +------> Bibtex, DocBook, Freemind, xoxo, S5...  

** Spreadsheets and Tables
|  1 |
|  2 |
|  3 |
|  4 |
|----|
| 13 |
#+TBLFM: $1=vsum(@1..@-1)

** Much much more
(which I am not familiar with and won't focus on)

including...
- GTD (supports the "Getting Things Done" methodology)
- scheduling and agendas
- task managment

* Babel -- using code and data in your documents
Integrating programming and natural languages in Org-mode documents.

- [[file:img/tower-of-babel.png]]
  #+begin_quote
  The people is one and they have all one language; ... and now
  nothing will be restrained from them
  #+end_quote

- [[file:img/babelfish.png]]
  #+begin_quote
  The Babel Fish is small, yellow and simultaneously translates from
  one spoken language to another.
  #+end_quote

#+begin_src emacs-lisp :results silent
  ;; live code execution
  (org-toggle-inline-images)
#+end_src

* Applications -- uses of integrated code and data

- reproducible research
  #+begin_quote Buckheit and Donoho 1995
    An article about computational science in a scientific publication
    is not the scholarship itself, it is merely advertising of the
    scholarship. The actual scholarship is the complete software
    development environment and complete set of instructions which
    generated the figures.
  #+end_quote
  
- literate programming
  #+begin_quote Knuth 1984
    Let us change our traditional attitude to the construction of
    programs: Instead of imagining that our main task is to instruct a
    computer what to do, let us concentrate rather on explaining to
    human beings what we want a computer to do.
  #+end_quote

- /working/ notes

- executable class notes, presentations and tutorials

* Syntax -- inline code, data and references
** Objects
code block
#+name: block-name
#+begin_src language header-arguments
  body
#+end_src

- scalar data
#+name: scalar-data
: number or string

tabular data
#+name: tabular-data
| 1 | 2 |
| 3 | 4 |

- list data
#+name: list-data
- 1
- 2
- 3
- 4

** References
Objects may be referenced from inline code blocks

#+name: reverse
#+begin_src emacs-lisp :var list=list-data :results list
  (reverse list)
#+end_src

#+name: transpose
#+begin_src lisp :var table=tabular-data
  (apply #'mapcar #'list table)
#+end_src

#+begin_src sh :var t=transpose :var r=reverse :var b=reverse(transpose(tabular-data))
echo "$b"|sed 's/3/three/;s/2/two/'
#+end_src

* Export -- supporting reproducible research
The results of our experiment are shown in Table \ref{raw}.  The mean
of which equal to src_R[:var d=raw]{mean(d)} and a plot of which is
shown in Figure \ref{raw-plot}.

#+Caption: Our example data.
#+label: raw
#+name: raw
| 1 |
| 1 |
| 2 |
| 3 |
| 5 |

#+name: raw-plot
#+begin_src gnuplot :var data=raw :file raw.png
  plot data w l
#+end_src

#+Caption: Our example plot of our example data.
#+label: raw-plot
#+attr_latex: width=8cm
#+RESULTS: raw-plot
[[file:raw.png]]

* Tangling -- supporting literate programming
Tangle out shell scripts to visualize a logistic map.

#+begin_src sh :tangle run :shebang #!/bin/sh
  mkfifo /tmp/feedgnuplot
  gnuplot < /tmp/feedgnuplot &
  
  for i in `seq 1 5 1250`;do
      j=`echo "$i.0 * 0.002925"|bc`
      echo -n "$j "
      cat <<EOF > /tmp/feedgnuplot
  <<plot>>
  EOF
  done
#+end_src

#+name: plot
#+begin_src gnuplot
set title '$j';
set yrange [0:1];
plot "< ./log-map $j" notitle;
#+end_src

#+begin_src sh :tangle log-map :shebang #!/bin/sh
prev=.50000
for i in `seq 0.01 0.01 0.99`;do
    echo $prev
    prev=`echo "$1 * $prev * (1 - $prev)"|bc`
done
#+end_src

* Example -- Pascal's Triangle with Lisp and Dot
** Generating Pascal's Triangle with Lisp
#+name: pascals-triangle
#+begin_src lisp :var n=2
  (defun pascals-triangle (n &aux (row '(1)))
    (cons row
          (loop :for i :below n
             :do (setf row (map 'list #'+ (append row '(0)) (append '(0) row)))
             :collect row)))
  (pascals-triangle n)
#+end_src

** Converting Pascal's Triangle to Dot with Python
#+name: pst-to-dot
#+begin_src python :var pst=pascals-triangle(5) :results output :exports none
  def node(i, j):
      return '"%d_%d"' % (i+1, j+1)
  
  def edge(i1, j1, i2, j2):
      return '%s--%s;' % (node(i1, j1), node(i2,j2))
  
  def node_with_edges(i, j):
      line = '%s [label="%d"];' % (node(i, j), pst[i][j])
      if j > 0:
          line += edge(i-1, j-1, i, j)
      if j < len(pst[i])-1:
          line += edge(i-1, j, i, j)
      return line
  
  pst = [filter(None, row) for row in pst]
  
  print '\n'.join([node_with_edges(i, j)
                   for i in range(len(pst))
                   for j in range(len(pst[i]))])
#+end_src

** Graphing Pascal's Triangle with Dot
#+headers: :file pascals-triangle.png :cmdline -Tpng
#+begin_src dot :var pst-vals=pst-to-dot :exports results
  graph {
          $pst-vals
  }
#+end_src

** Checking Pascal's Triangle with Emacs Lisp
#+name: pst-check
#+begin_src emacs-lisp :var pst=pascals-triangle(5)
  (defun fib (n)
    (if (<= n 2)
        1
      (+ (fib (- n 1)) (fib (- n 2)))))
  
  (mapcar (lambda (row)
            (if (= (fib n) (reduce #'+ row))
                "pass"
              "fail"))
          pst)
#+end_src

* Conclusion
It is fun to mix prose and code!

Org-mode has many features which make it ideal for RR and LP.
- open source
- widely available
- active community
- general and extensible
- integration with Emacs

